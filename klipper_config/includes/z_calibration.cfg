[z_calibration]
probe_nozzle_x: 228
probe_nozzle_y: 356
#   The X and Y coordinates (in mm) for clicking the nozzle on the
#   Z endstop.
probe_switch_x: 221
probe_switch_y: 336
#   The X and Y coordinates (in mm) for clicking the probe's switch
#   on the Z endstop.
# probe_bed_x: default from relative_reference_index of bed_mesh
# probe_bed_y: default from relative_reference_index of bed_mesh
#   The X and Y coordinates (in mm) for probing on the print surface
#   (e.g. the center point) These coordinates will be adapted by the
#   probe's X and Y offsets. The default is the relative_reference_index
#   of the configured bed_mesh. It will raise an error if there is no
#   probe_bed site and no bed_mesh with a relative_reference_index
#   configured.
switch_offset: 0.400
#   The trigger point offset of the used mag-probe switch.
#   This needs to be fined out manually. More on this later
#   in this section..
max_deviation: 3.0
#   The maximum allowed deviation of the calculated offset.
#   If the offset exceeds this value, it will stop!
#   The default is 1.0 mm.
# samples: default from [probe] section
#   The number of times to probe each point. The probed z-values
#   will be averaged. The default is from the probe's configuration.
# samples_tolerance: default from [probe] section
#   The maximum Z distance (in mm) that a sample may differ from other
#   samples. The default is from the probe's configuration.
# samples_tolerance_retries: default from [probe] section
#   The number of times to retry if a sample is found that exceeds
#   samples_tolerance. The default is from the probe's configuration.
# samples_result: default from [probe] section
#   The calculation method when sampling more than once - either
#   "median" or "average". The default is from the probe's configuration.
# clearance: 2 * z_offset from the [probe] section
#   The distance in mm to move up before moving to the next
#   position. The default is two times the z_offset from the probe's
#   configuration.
# position_min: default from [stepper_z] section.
#   Minimum valid distance (in mm) used for probing move. The
#   default is from the Z rail configuration.
speed: 50
#   The moving speed in X and Y. The default is 50 mm/s.
# lift_speed: default from [probe] section
#   Speed (in mm/s) of the Z axis when lifting the probe between
#   samples and clearance moves. The default is from the probe's
#   configuration.
# probing_speed: default homing_speed from [stepper_z] section.
#   The fast probing speed (in mm/s) used, when probing_first_fast
#   is activated. The default is from the Z rail configuration.
# probing_second_speed: default second_homing_speed from [stepper_z] section.
#   The slower speed (in mm/s) for probing the recorded samples.
#   The default is second_homing_speed of the Z rail configuration.
# probing_retract_dist: default homing_retract_dist from [stepper_z] section.
#   Distance to backoff (in mm) before probing the next sample.
#   The default is homing_retract_dist from the Z rail configuration.
probing_first_fast: false
#   If true, the first probing is done faster by the probing speed.
#   This is to get faster down and the result is not recorded as a
#   probing sample. The default is false.

[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    CG28
    M117 Z-Calibration..
    #_SET_LOWER_STEPPER_CURRENT  # I lower the stepper current for homing and probing 
    _GET_PROBE                  # a macro for fetching the probe first
    BASE_CALIBRATE_Z
    _PARK_PROBE                 # and parking it afterwards
    #_RESET_STEPPER_CURRENT      # resetting the stepper current
    M117

#####################################################################
#  Macros
#####################################################################
## customize QUAD GANTRY LEVEL gcode 
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BASE_QUAD_GANTRY_LEVEL
gcode:
    M117 QGL..
    _CG28 RESET_SETTINGS=false
    # reduce accel current
    _SET_ACC VAL=HOME
    #_SET_Z_CURRENT VAL=HOME
    SECURE_ATTACH_PROBE
    BASE_QUAD_GANTRY_LEVEL
    # ability to disable z calibration - it's done later in PRINT_START
    {% if params.CALIBRATE|default('true') == 'true' %}
      CALIBRATE_Z RESET_SETTINGS=false
    {% else %}
      SECURE_DOCK_PROBE
    {% endif %}
    # reset accel current
    {% if params.RESET_SETTINGS|default('true') == 'true' %}
      #_SET_Z_CURRENT
      _SET_ACC
    {% endif %}
    M117

## customize CALIBRATE Z gcode 
[gcode_macro CALIBRATE_Z]
rename_existing: BASE_CALIBRATE_Z
gcode:
    _CG28 RESET_SETTINGS=false
    M117 Z-Calibration..
    # reduce accel current
    _SET_ACC VAL=HOME
    #_SET_Z_CURRENT VAL=HOME
    SECURE_ATTACH_PROBE
    BASE_CALIBRATE_Z
    SECURE_DOCK_PROBE
    # reset accel current
    {% if params.RESET_SETTINGS|default('true') == 'true' %}
      #_SET_Z_CURRENT
      _SET_ACC
    {% endif %}
    M117

# attaching the probe if not already attached
[gcode_macro SECURE_ATTACH_PROBE]
gcode:
    QUERY_PROBE
    _PROBE_ACTION action=attach
    _CHECK_PROBE action=check_attach

# docking the probe if not already docked
[gcode_macro SECURE_DOCK_PROBE]
gcode:
    QUERY_PROBE
    _PROBE_ACTION action=dock
    _CHECK_PROBE action=check_dock


[gcode_macro _CHECK_PROBE]
variable_probe_state: 0
default_parameter_action:
gcode:
    QUERY_PROBE
    _PROBE_ACTION action={ ACTION }

[gcode_macro _PROBE_ACTION]
default_parameter_action:        
gcode:
  {% set state = not printer.probe.last_query %}
  SET_GCODE_VARIABLE MACRO=_CHECK_PROBE VARIABLE=probe_state VALUE={ state }

  # attach/dock probe
  {% if not state and params.ACTION == 'attach' %}
    _ATTACH_PROBE
  {% endif %}
  {% if state and params.ACTION == 'dock' %}
    _DOCK_PROBE
  {% endif %}

  # check if probe fails to attach/detach
  {% if state and params.ACTION == 'check_dock' %}
    { action_raise_error("Probe dock failed!") }
  {% endif %}
  {% if not state and params.ACTION == 'check_attach' %}
    { action_raise_error("Probe attach failed!") }
  {% endif %}

[gcode_macro _ATTACH_PROBE]
gcode:
    SAVE_GCODE_STATE NAME=_ATTACH_PROBE
    ATTACH_PROBE
#    G90                            ; absolute positioning
#    G0 X252.5 Y285 Z10 F12000      ; move to mag-probe
#    G0 Z1.0 F540                   ; move down to mag-probe
#    G0 Y300 F3000                  ; move in
#    G0 Y285 F3000                  ; move out
#    G0 Z10 F540                    ; move up

    RESTORE_GCODE_STATE NAME=_ATTACH_PROBE

[gcode_macro _DOCK_PROBE]
gcode:
    SAVE_GCODE_STATE NAME=_DOCK_PROBE

#    G90                            ; absolute positioning
#    G0 X252.5 Y285 Z10 F12000      ; move to mag-probe
#    G0 Z1.0 F540                   ; move down to mag-probe
#    G0 Y300 F3000                  ; move in
#    G0 Z10 F540                    ; move up

    DOCK_PROBE

    RESTORE_GCODE_STATE NAME=_DOCK_PROBE

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    SECURE_ATTACH_PROBE
    _BED_MESH_CALIBRATE {% for p in params 
           %}{'%s=%s' % (p, params[p])}{% 
          endfor %}
    SECURE_DOCK_PROBE

[gcode_macro PARKCENTER]
gcode:
    {% set Z = params.Z|default(30)|float %}
    SAVE_GCODE_STATE NAME=PARKCENTER_state
    _CG28                          ; Home if not already homed
    G90                            ; absolute positioning
    G0 X175 Y175 Z{Z} F12000       ; move to center
    RESTORE_GCODE_STATE NAME=PARKCENTER_state


[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
    #store current nozzle location
    #SAVE_GCODE_STATE NAME=original_nozzle_location
    SECURE_ATTACH_PROBE
    PARKCENTER Z={printer.configfile.settings.quad_gantry_level.horizontal_move_z}
    _PROBE_ACCURACY {% for p in params 
            %}{'%s=%s' % (p, params[p])}{% 
           endfor %}
    SECURE_DOCK_PROBE
    #restore current nozzle location
    #RESTORE_GCODE_STATE NAME=original_nozzle_location MOVE=1

#####################################################################
#  Homing definition
#####################################################################
[homing_override]
axes: z
set_position_z: 0
gcode:
    SAVE_GCODE_STATE NAME=HOMING_state
    M117 Homing..

    ## reduce current and acceleration of motors
    _SET_ACC VAL=HOME
    #_SET_Z_CURRENT VAL=HOME
    
    G91                            ; relative positioning
    G0 Z10 F540                    ; move up
    G90                            ; absolute positioning

    # Home X and Y only for G28 or G28 XYZ
    {% if 'Z' in params %}
      {% if "x" not in printer.toolhead.homed_axes %}
        G28 X
      {% endif %}
      {% if "y" not in printer.toolhead.homed_axes %}
        G28 Y
      {% endif %}
    {% else %}
      G28 X Y
    {% endif %} 

    ##	XY Location of the Z Endstop Switch
    G0 X228 Y356 F12000            ; move to Z-Pin
    G28 Z                          ; home Z
    G0 Z10 F540                    ; move up

    ## return to org current/acceleration settings
    {% if params.RESET_SETTINGS|default('true') == 'true' %}
      #_SET_Z_CURRENT
      _SET_ACC
    {% endif %}

    RESTORE_GCODE_STATE NAME=HOMING_state

#####################################################################
#  Macros
#####################################################################
## conditional home
[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
  {% endif %}

[gcode_macro _SET_ACC]
variable_accel: 0
variable_accel_to_decel: 0
variable_last_val: 'RUN'
gcode:
  # set default parameter value
  {% set val = params.VAL|default(RUN)|string %}
  {% set homing_accel = 1200 %}
  
  {% if val == 'HOME' %}
    # store old values and apply home value
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.toolhead.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
    {% set accel = homing_accel %}
    {% set accel_to_decel = homing_accel|int * 2 / 3 %}
  {% elif val == 'CONFIG' %}
    # set all to config values
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.configfile.settings.printer.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.configfile.settings.printer.max_accel_to_decel}
    {% set accel = printer.configfile.settings.printer.max_accel %}
    {% set accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel %}
  {% else %}
    # load stored values
    {% set accel = printer["gcode_macro _SET_ACC"].accel %}
    {% set accel_to_decel = printer["gcode_macro _SET_ACC"].accel_to_decel %}
  {% endif %}

  {% if val !=  printer["gcode_macro _SET_ACC"].last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=last_val VALUE='"{val}"'
    {action_respond_info("VELOCITY_LIMIT set ACCEL: %d ACCEL_TO_DECEL: %d" % (accel|int, accel_to_decel|int))}
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}
  {% endif %}

[gcode_macro _SET_Z_CURRENT]
variable_last_val: 'RUN'
gcode:
  # set default parameter value
  {% set val = params.VAL|default('RUN') %}
  {% if val == 'HOME' %}
    {% set xy_run  = 0.4 %}
    {% set xy_hold = 0.4 %}
    {% set z_run   = 0.3 %}
    {% set z_hold  = 0.3 %}
  {% else %}
    {% set xy_run  = printer.configfile.settings["tmc2209 stepper_x"]["run_current"] %}
    {% set xy_hold = printer.configfile.settings["tmc2209 stepper_x"]["hold_current"] %}
    {% set z_run   = printer.configfile.settings["tmc2209 stepper_z"]["run_current"] %}
    {% set z_hold  = printer.configfile.settings["tmc2209 stepper_z"]["hold_current"] %}
  {% endif %}
  {% if val != printer["gcode_macro _SET_Z_CURRENT"].last_val  %}
    SET_GCODE_VARIABLE MACRO=_SET_Z_CURRENT VARIABLE=last_val VALUE='"{val}"'
    {action_respond_info("Home&Probe: xyRunCur %.2fA rms xyHoldCur %.2fA rms zRunCur %.2fA rms zHoldCur %.2fA rms" % (xy_run|float, xy_hold|float, z_run|float, z_hold|float))}
    SET_TMC_CURRENT STEPPER=stepper_x  CURRENT={xy_run} HOLDCURRENT={xy_hold}
    SET_TMC_CURRENT STEPPER=stepper_y  CURRENT={xy_run} HOLDCURRENT={xy_hold}
    SET_TMC_CURRENT STEPPER=stepper_z  CURRENT={z_run} HOLDCURRENT={z_hold}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={z_run} HOLDCURRENT={z_hold}
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={z_run} HOLDCURRENT={z_hold}
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={z_run} HOLDCURRENT={z_hold}
    M400
  {% endif %}

[gcode_macro PRINT_START]
gcode:
    {% set bed_temp = params.BED_TEMP|default(100)|float %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(220)|float %}
    {% set z_adjust = params.Z_ADJUST|default(0.0)|float %}
    {% set retract = 10 %}
    BED_MESH_CLEAR                 ; clear mesh
    _CG28                          ; Home the printer
    G90                            ; Use absolute coordinates
    PARKCENTER                     ; Move to center
    M117 Heating..
    _HEATER_ON
    M106 S255                      ; set print fan to full speed
    M140 S{bed_temp}               ; Start bed heating
    M190 S{bed_temp}               ; Wait for bed to reach temperature
    M109 S{extruder_temp}          ; Set and wait for nozzle to reach temperature
    M107                           ; turn print fan off
    QUAD_GANTRY_LEVEL CALIBRATE=false ; QGL
    M109 S{extruder_temp}          ; Set and wait for nozzle to reach temperature
    clean_nozzle                   ; clean nozzle
    CALIBRATE_Z
    #BED_MESH_PROFILE LOAD=default  ; load mesh
    BED_MESH_CALIBRATE
    # Adjust the G-Code Z offset if needed
    SET_GCODE_OFFSET Z_ADJUST={z_adjust} MOVE=1
    PURGE_LINE
#    M117 Intro Line..
#    G90                            ; Use absolute coordinates
#    G1 Y20 X2.2 Z5 F12000           ; Move the nozzle to the front and near the bed
#    G1 Z0.7 F300                   ; Move the nozzle very close to the bed
#    G92 E0.0                       ; set extruder posion to 0
#    G1 E{retract} F3600            ; extrude retract
#    G92 E0.0                       ; set extruder posion to 0
#    G1 X180 E15.0 F500.0           ; intro line
#    G92 E0.0                       ; set extruder posion to 0
#    G1 X174 F6000                  ; move away from intro line
    M117

